---
title: "Practical Python: Beginner's Guide"
description: "sets, tuples, dictionaries, mutability & hashing."
date: 2025-10-13
jupyter: python3
categories: [python, data-structures, tuples, sets, dictionaries, fundamentals]
image: https://static.frontendmasters.com/assets/courses/2020-12-22-practical-python/posterframe.webp
---


-   Frontend Masters â€” Practical Guide to Python (full course) by Nina Zakharenko: <https://frontendmasters.com/courses/practical-python/>


### Numbers and booleans

```{python}
a = 12
b = 3.5
total = a + b
is_equal = (a == 2)
truthy = True and (1 < 2)
falsy = False or (2 > 5)
not_val = not False

print(a, type(a))
print(b, type(b))
print(total)
print(is_equal, truthy, falsy, not_val)
```

### Strings and f-strings

```{python}
name = "Charlotte"
lang = "Python"
msg = f"Hi {name}, welcome to {lang}!"

print(name.upper())
print(len(name))
print("thon" in lang)
print(msg)
```

### Lists

```{python}
nums = [1, 2, 3]
nums.append(4)
sliced = nums[1:3]
doubled = [x * 2 for x in nums]

print(nums)
print(sliced)
print(doubled)
```

### Tuples

```{python}
t = (1, "a", True)
single = (42,)
packed = 1, 2  # tuple without parentheses
x, y = (10, 20)  # unpacking

print(t)
print(single)
print(packed)
print(x, y)

# t[0] = 99  # TypeError: 'tuple' object does not support item assignment
```

### Dictionaries

```{python}
user = {"name": "Charlotte", "role": "AI Engineer"}
user["city"] = "Ipswich"

print(user["name"])       # indexing by key
print("role" in user)      # membership check on keys
print(user)
```

### Sets

```{python}
names = ["alice", "bob", "alice"]
s = set(names)
s.add("carol")

print(s)
print("alice" in s)
```

### Hash function and hashability

```{python}
print(hash(("a", 1)))  # tuples are hashable if their items are hashable
print(hash("abc"))

# hash([1, 2])   # TypeError: unhashable type: 'list'
# hash({"k": 1}) # TypeError: unhashable type: 'dict'
```

### Logic: and / or / in

```{python}
print(True and False)
print(True or False)
print(False or 0)
print(0 or "fallback")
print("x" and "y")      # returns last truthy operand
print("py" in "python")  # substring membership
```

### Functions

```{python}

def my_function(x=4):
   return x + 2

my_function()
```

```{python}

def my_other_function(x):
   return x * 2

my_other_function(21312)
```

```{python}

def another_cat(x, y, z=12):
   return z + (x + y)

another_cat(1, 2)
```

### Conditionals

```{python}

def my_dogs(x, one, two):
    if x == 2:
        return f"my doggos are {one} and {two}"
    elif x > 2:
        return "Soon! soon we will have them all!"
    else: 
        return "Got no doggos"

my_dogs(1, "Annie", "Anubis")

```

```{python}

def fizzbuzz(number):
    if (number % 3 == 0) and (number % 5 == 0):
        print("fizz")
    else: print("buzz")

fizzbuzz(15)
fizzbuzz(5)
```

### Loops

```{python}

family = ["Annie", "Anubis", "Alex", "Charlotte"]

for family_member in family:
    print(f"My name is {family_member}!")

print(f"outside of the loop {family_member}")

list(enumerate(family))
```

enumerate returns list of tuples , first item index, second item the value

```{python}

colours = ["Red", "Yellow", "Pink", "Green", "Orange", "Purple", "Blue"]

for index, colour in enumerate(colours):
    print(f"this is the greatest colour {colour} number {index}")

```

```{python}

concepts_to_learn = {
    "Python": "Language",
    "TensorFlow": "Execution Env",
    "Pytorch": "differnt exectuion place",
    "Deep Learning": "Neural networks and that"
}

for foo in concepts_to_learn:
    print(foo)

```

```{python}

concepts_to_learn.items()
```

```{python}

for key, value in concepts_to_learn.items():
    print(key) 
    print("----")
    print(value)

```

```{python}

x = 0
while x < 5:
    print(x)
    x += 1
```

```{python}

names = ["Lisa", "Bob", "Jeremy", "Django", "Mario"]

def return_target(target="Jeremy"):
    for name in names:
        print(name)
        if name == target:
            print(f"we found {target}!")
            return name
```

### List comprehensions

```{python}

names = ["Lisa", "Bob", "Jeremy", "Django", "Mario"]
my_list = []

for name in names:
    my_list.append(len(name))

print("First way: ", my_list)

print("Shorter way:", [len(name) for name in names])
```

```{python}

nums = [0, 1, 2, 3, 4]

[num * 2 for num in nums] 
```

### Slicing

```{python}

my_cake = "Hey this is a big cake!"
my_cake[14:22]

my_cake[:18]
my_cake[19:]
my_cake[-1]
```

### files - reading, writing, appending, and JSON

Below are executable examples that will run in this page's kernel. They demonstrate different `open()` modes and working with a small JSON file stored alongside this page at `learning-journey/data/example.json`.

```{python}
# Write: creates or truncates file
with open("my_file.txt", "w", encoding="utf-8") as f:
    f.write("first line\n")
    f.write("second line\n")

# Append: adds to end of file
with open("my_file.txt", "a", encoding="utf-8") as f:
    f.write("appended line\n")

# Read entire file
with open("my_file.txt", "r", encoding="utf-8") as f:
    contents = f.read()
contents
```

```{python}
# Read line-by-line
with open("my_file.txt", "r", encoding="utf-8") as f:
    for line in f:
        print(line.rstrip())
```


```{python}
# Explicit open/close (less preferred vs. context manager)
f = open("my_file.txt", "r", encoding="utf-8")
try:
    print(f.readline().rstrip())
finally:
    f.close()
```

```{python}
# pathlib usage
from pathlib import Path

path = Path("my_file.txt")
path.write_text("overwritten via pathlib\n", encoding="utf-8")
print(path.read_text(encoding="utf-8"))
```


### Classes

```{python}

class Car:
    runs = True

    def start(self):
        if self.runs:
            print("The car starts.")
        else:
            print("The car is broken.")

my_car = Car()
my_car.start()
my_car.runs = False
my_car.start()

my_other_car = Car()
my_other_car.start()
```


### isinstance 

```{python}

print(isinstance(my_car, Car))
print(isinstance(my_car, str))
print(isinstance("Hallo there", str))
print(isinstance(12, int))
```

### initializing classes

```{python}

class Supersupercar:
    runs = True
    def __init__(self, make, model, year):
        self.make = make
        self.model = model
        self.year = year

    def start(self):
        if self.runs:
            print(f"The {self.make} {self.model} {self.year} starts.")
        else:
            print(f"The {self.make} {self.model} {self.year} is broken.")

my_car = Supersupercar("Toyota", "Corolla", 2020)
my_car.start()

my_better_car = Supersupercar("Mustang", "GT", 2025)
my_better_car.start()


```

![Mustang GT](https://pictures.dealer.com/a/autonationkatyfordfd/1234/3f1b1dbb615643a59dcc8b14a1bfd707.png?impolicy=downsize_bkpt&w=380)


### inheritance

```{python}


class Mustang(Supersupercar):
    def __init__(self, make, model, year, color):
        super().__init__(make, model, year)
        self.color = color

my_jaguar = Mustang("Jaguar", "2027", 2027, "Green")
my_jaguar.start()

```

![Jaguar 2027](https://s1.cdn.autoevolution.com/images/news/virtual-artist-morphs-jaguar-type-00-design-vision-concept-into-a-proper-four-door-gt-244298_1.jpg)

### Exceptions

```{python}

try:
    print(10 / 0)
except ZeroDivisionError:
    print("You can't divide by zero!")

try:
    print(10 / 2)
except ValueError:
    print("You can divide by two!")
```


### requests

```{python}

# import requests

# response = requests.get("https://ur-api.....")

# print(response.status_code)
# print(response.json())

```



