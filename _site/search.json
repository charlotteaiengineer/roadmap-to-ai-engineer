[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "charlotteai.engineer",
    "section": "",
    "text": "This is a Quarto website.\nTo learn more about Quarto websites visit https://quarto.org/docs/websites."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site"
  },
  {
    "objectID": "learning-journey/week-2025-10-13.html",
    "href": "learning-journey/week-2025-10-13.html",
    "title": "Week of Oct 13, 2025",
    "section": "",
    "text": "Understand how and when to use sets, tuples, and dictionaries\nExplain mutability vs. immutability and implications for hashing\nApply tuple unpacking safely and predictably"
  },
  {
    "objectID": "learning-journey/week-2025-10-13.html#what-i-focused-on",
    "href": "learning-journey/week-2025-10-13.html#what-i-focused-on",
    "title": "Week of Oct 13, 2025",
    "section": "What I focused on",
    "text": "What I focused on\n\nPython core data structures: sets, tuples, dictionaries\nMutability vs. immutability and how it relates to hashability\nTuple packing/unpacking patterns and pitfalls"
  },
  {
    "objectID": "learning-journey/week-2025-10-13.html#notes-bits-i-picked-up",
    "href": "learning-journey/week-2025-10-13.html#notes-bits-i-picked-up",
    "title": "Week of Oct 13, 2025",
    "section": "Notes / Bits I picked up",
    "text": "Notes / Bits I picked up\n\nEmpty set literal is set(), not {} (that’s an empty dict).\nSets are unordered, unique collections; you cannot index into a set.\nTuples are immutable; beware stray trailing commas creating tuples unexpectedly.\nTuple unpacking requires counts to match; use _ for values you do not need.\nDictionaries are keyed mappings; use in to check key existence.\nHashable typically implies immutable; lists/dicts/sets are unhashable, tuples/ints/str are hashable."
  },
  {
    "objectID": "learning-journey/week-2025-10-13.html#resources",
    "href": "learning-journey/week-2025-10-13.html#resources",
    "title": "Week of Oct 13, 2025",
    "section": "Resources",
    "text": "Resources\n\nFrontend Masters — Practical Guide to Python (full course): https://frontendmasters.com/courses/practical-python/"
  },
  {
    "objectID": "learning-journey/week-2025-10-13.html#demos-experiments",
    "href": "learning-journey/week-2025-10-13.html#demos-experiments",
    "title": "Week of Oct 13, 2025",
    "section": "Demos / Experiments",
    "text": "Demos / Experiments\n\nQuick REPL exercises for constructing sets from lists, tuple unpacking, and dict updates."
  },
  {
    "objectID": "learning-journey/week-template.html#notes-bits-i-picked-up",
    "href": "learning-journey/week-template.html#notes-bits-i-picked-up",
    "title": "Week of <Mon, MMM DD, YYYY>",
    "section": "Notes / Bits I picked up",
    "text": "Notes / Bits I picked up"
  },
  {
    "objectID": "learning-journey/week-template.html#resources",
    "href": "learning-journey/week-template.html#resources",
    "title": "Week of <Mon, MMM DD, YYYY>",
    "section": "Resources",
    "text": "Resources"
  },
  {
    "objectID": "learning-journey/week-template.html#demos-experiments",
    "href": "learning-journey/week-template.html#demos-experiments",
    "title": "Week of <Mon, MMM DD, YYYY>",
    "section": "Demos / Experiments",
    "text": "Demos / Experiments"
  },
  {
    "objectID": "learning-journey/index.html",
    "href": "learning-journey/index.html",
    "title": "Learning Journey",
    "section": "",
    "text": "This is a living, outcome-driven curriculum for becoming an AI Engineer. Each week is a self-contained module with learning outcomes, curated resources, exercises, and a readiness checklist so others can follow along or adapt it to their own path. Open any week below.\n\n\n\n\n\n\n   \n    \n    \n      Order By\n      Default\n      \n        Date - Oldest\n      \n      \n        Date - Newest\n      \n      \n        Title\n      \n    \n  \n    \n      \n      \n    \n\n\n\n\n\n\nDate\n\n\n\nTitle\n\n\n\nDescription\n\n\n\n\n\n\n\n\nInvalid Date\n\n\nWeek of &lt;Mon, MMM DD, YYYY&gt;\n\n\n\n\n\n\n\n\n\nOct 13, 2025\n\n\nWeek of Oct 13, 2025\n\n\nWeek 1 — Practical Python: sets, tuples, dictionaries, mutability & hashing.\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "learning-journey/week-2025-10-13.html#completed",
    "href": "learning-journey/week-2025-10-13.html#completed",
    "title": "Week of Oct 13, 2025",
    "section": "",
    "text": "Finished the Frontend Masters Practical Guide to Python lesson on Sets, Tuples, & Dictionaries (course link)."
  },
  {
    "objectID": "learning-journey/week-2025-10-13.html#learning-outcomes",
    "href": "learning-journey/week-2025-10-13.html#learning-outcomes",
    "title": "Week of Oct 13, 2025",
    "section": "",
    "text": "Understand how and when to use sets, tuples, and dictionaries\nExplain mutability vs. immutability and implications for hashing\nApply tuple unpacking safely and predictably"
  },
  {
    "objectID": "learning-journey/week-2025-10-13.html#key-notes",
    "href": "learning-journey/week-2025-10-13.html#key-notes",
    "title": "Week of Oct 13, 2025",
    "section": "Key notes",
    "text": "Key notes\n\nEmpty set literal is set(), not {} (that’s an empty dict).\nSets are unordered, unique collections; you cannot index into a set.\nTuples are immutable; beware stray trailing commas creating tuples unexpectedly.\nTuple unpacking requires counts to match; use _ for values you do not need.\nDictionaries are keyed mappings; use in to check key existence.\nHashable typically implies immutable; lists/dicts/sets are unhashable, tuples/ints/str are hashable."
  },
  {
    "objectID": "learning-journey/week-2025-10-13.html#exercises",
    "href": "learning-journey/week-2025-10-13.html#exercises",
    "title": "Week of Oct 13, 2025",
    "section": "Exercises",
    "text": "Exercises\n\nPractice in REPL: construct sets from lists, perform tuple unpacking, and update dicts."
  },
  {
    "objectID": "learning-journey/week-2025-10-13.html#readiness-checklist",
    "href": "learning-journey/week-2025-10-13.html#readiness-checklist",
    "title": "Week of Oct 13, 2025",
    "section": "Readiness checklist",
    "text": "Readiness checklist\n\nCan create and manipulate sets, and explain why they are unordered\nCan define tuples and avoid accidental tuple creation via trailing commas\nCan unpack tuples defensively and handle mismatched lengths\nCan use dictionaries idiomatically (membership checks, updates)"
  },
  {
    "objectID": "learning-journey/week-2025-10-13.html#examples",
    "href": "learning-journey/week-2025-10-13.html#examples",
    "title": "Week of Oct 13, 2025",
    "section": "Examples",
    "text": "Examples\n\nNumbers and booleans\n\na = 12\nb = 3.5\ntotal = a + b\nis_equal = (a == 2)\ntruthy = True and (1 &lt; 2)\nfalsy = False or (2 &gt; 5)\nnot_val = not False\n\nprint(a, type(a))\nprint(b, type(b))\nprint(total)\nprint(is_equal, truthy, falsy, not_val)\n\n12 &lt;class 'int'&gt;\n3.5 &lt;class 'float'&gt;\n15.5\nFalse True False True\n\n\n\n\nStrings and f-strings\n\nname = \"Charlotte\"\nlang = \"Python\"\nmsg = f\"Hi {name}, welcome to {lang}!\"\n\nprint(name.upper())\nprint(len(name))\nprint(\"thon\" in lang)\nprint(msg)\n\nCHARLOTTE\n9\nTrue\nHi Charlotte, welcome to Python!\n\n\n\n\nLists\n\nnums = [1, 2, 3]\nnums.append(4)\nsliced = nums[1:3]\ndoubled = [x * 2 for x in nums]\n\nprint(nums)\nprint(sliced)\nprint(doubled)\n\n[1, 2, 3, 4]\n[2, 3]\n[2, 4, 6, 8]\n\n\n\n\nTuples\n\nt = (1, \"a\", True)\nsingle = (42,)\npacked = 1, 2  # tuple without parentheses\nx, y = (10, 20)  # unpacking\n\nprint(t)\nprint(single)\nprint(packed)\nprint(x, y)\n\n# t[0] = 99  # TypeError: 'tuple' object does not support item assignment\n\n(1, 'a', True)\n(42,)\n(1, 2)\n10 20\n\n\n\n\nDictionaries\n\nuser = {\"name\": \"Charlotte\", \"role\": \"AI Engineer\"}\nuser[\"city\"] = \"Ipswich\"\n\nprint(user[\"name\"])       # indexing by key\nprint(\"role\" in user)      # membership check on keys\nprint(user)\n\nCharlotte\nTrue\n{'name': 'Charlotte', 'role': 'AI Engineer', 'city': 'Ipswich'}\n\n\n\n\nSets\n\nnames = [\"alice\", \"bob\", \"alice\"]\ns = set(names)\ns.add(\"carol\")\n\nprint(s)\nprint(\"alice\" in s)\n\n{'alice', 'bob', 'carol'}\nTrue\n\n\n\n\nHash function and hashability\n\nprint(hash((\"a\", 1)))  # tuples are hashable if their items are hashable\nprint(hash(\"abc\"))\n\n# hash([1, 2])   # TypeError: unhashable type: 'list'\n# hash({\"k\": 1}) # TypeError: unhashable type: 'dict'\n\n3970898019841280781\n-5735924352006240971\n\n\n\n\nLogic: and / or / in\n\nprint(True and False)\nprint(True or False)\nprint(False or 0)\nprint(0 or \"fallback\")\nprint(\"x\" and \"y\")      # returns last truthy operand\nprint(\"py\" in \"python\")  # substring membership\n\nFalse\nTrue\n0\nfallback\ny\nTrue\n\n\n\n\nFunctions\n\ndef my_function(x=4):\n   return x + 2\n\nmy_function()\n\n6\n\n\n\ndef my_other_function(x):\n   return x * 2\n\nmy_other_function(21312)\n\n42624\n\n\n\ndef another_cat(x, y, z=12):\n   return z + (x + y)\n\nanother_cat(1, 2)\n\n15\n\n\n\n\nConditionals\n\ndef my_dogs(x, one, two):\n    if x == 2:\n        return f\"my doggos are {one} and {two}\"\n    elif x &gt; 2:\n        return \"Soon! soon we will have them all!\"\n    else: \n        return \"Got no doggos\"\n\nmy_dogs(1, \"Annie\", \"Anubis\")\n\n'Got no doggos'\n\n\n\ndef fizzbuzz(number):\n    if (number % 3 == 0) and (number % 5 == 0):\n        print(\"fizz\")\n    else: print(\"buzz\")\n\nfizzbuzz(15)\nfizzbuzz(5)\n\nfizz\nbuzz\n\n\n\n\nLoops\n\nfamily = [\"Annie\", \"Anubis\", \"Alex\", \"Charlotte\"]\n\nfor family_member in family:\n    print(f\"My name is {family_member}!\")\n\nprint(f\"outside of the loop {family_member}\")\n\nlist(enumerate(family))\n\nMy name is Annie!\nMy name is Anubis!\nMy name is Alex!\nMy name is Charlotte!\noutside of the loop Charlotte\n\n\n[(0, 'Annie'), (1, 'Anubis'), (2, 'Alex'), (3, 'Charlotte')]\n\n\nenumerate returns list of tuples , first item index, second item the value\n\ncolours = [\"Red\", \"Yellow\", \"Pink\", \"Green\", \"Orange\", \"Purple\", \"Blue\"]\n\nfor index, colour in enumerate(colours):\n    print(f\"this is the greatest colour {colour} number {index}\")\n\nthis is the greatest colour Red number 0\nthis is the greatest colour Yellow number 1\nthis is the greatest colour Pink number 2\nthis is the greatest colour Green number 3\nthis is the greatest colour Orange number 4\nthis is the greatest colour Purple number 5\nthis is the greatest colour Blue number 6\n\n\n\nconcepts_to_learn = {\n    \"Python\": \"Language\",\n    \"TensorFlow\": \"Execution Env\",\n    \"Pytorch\": \"differnt exectuion place\",\n    \"Deep Learning\": \"Neural networks and that\"\n}\n\nfor foo in concepts_to_learn:\n    print(foo)\n\nPython\nTensorFlow\nPytorch\nDeep Learning\n\n\n\nconcepts_to_learn.items()\n\ndict_items([('Python', 'Language'), ('TensorFlow', 'Execution Env'), ('Pytorch', 'differnt exectuion place'), ('Deep Learning', 'Neural networks and that')])\n\n\n\nfor key, value in concepts_to_learn.items():\n    print(key) \n    print(\"----\")\n    print(value)\n\nPython\n----\nLanguage\nTensorFlow\n----\nExecution Env\nPytorch\n----\ndiffernt exectuion place\nDeep Learning\n----\nNeural networks and that\n\n\n\nx = 0\nwhile x &lt; 5:\n    print(x)\n    x += 1\n\n0\n1\n2\n3\n4\n\n\n\nnames = [\"Lisa\", \"Bob\", \"Jeremy\", \"Django\", \"Mario\"]\n\ndef return_target(target=\"Jeremy\"):\n    for name in names:\n        print(name)\n        if name == target:\n            print(f\"we found {target}!\")\n            return name\n\n\n\nList comprehensions\n\nnames = [\"Lisa\", \"Bob\", \"Jeremy\", \"Django\", \"Mario\"]\nmy_list = []\n\nfor name in names:\n    my_list.append(len(name))\n\nprint(\"First way: \", my_list)\n\nprint(\"Shorter way:\", [len(name) for name in names])\n\nFirst way:  [4, 3, 6, 6, 5]\nShorter way: [4, 3, 6, 6, 5]\n\n\n\nnums = [0, 1, 2, 3, 4]\n\n[num * 2 for num in nums] \n\n[0, 2, 4, 6, 8]\n\n\n\n\nSlicing\n\nmy_cake = \"Hey this is a big cake!\"\nmy_cake[14:22]\n\nmy_cake[:18]\nmy_cake[19:]\nmy_cake[-1]\n\n'!'\n\n\n\n\nfiles\n\nopen(\"my_file.txt\")\nopen(\"my_file.txt\", \"w\")\nopen(\"my_file.txt\", \"a\")"
  }
]