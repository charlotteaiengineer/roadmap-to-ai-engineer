---
title: "Papers"
format:
  html:
    toc: false
---

<style>
/* List layout (papers) */
.list { display: block; }
.list-item {
  display: block;
  background: #fff;
  border-radius: 10px;
  box-shadow: 0 2px 10px rgba(0,0,0,0.06);
  padding: 12px 14px;
  margin: 0 0 10px;
  color: inherit;
  text-decoration: none;
}
.list-item:hover { background: #fafafa; }
.title-row { display:flex; align-items:center; gap:8px; justify-content: space-between; }
.title { font-weight: 700; font-size: 15px; line-height: 1.35; }
.authors { font-size: 13px; color: rgba(0,0,0,0.65); margin-top: 4px; }
/* Status dot (match books page) */
.status-dot { width: 8px; height: 8px; border-radius: 50%; display:inline-block; flex: 0 0 8px; }
.status-read { background:#43a047; }
.status-inprogress { background:#fdd835; }
.status-unread { background:#e53935; }
/* Filters and empty state (match books page) */
.filters { display:flex; gap:8px; flex-wrap:wrap; margin: 0 0 10px; }
.filter-btn { background:#fff; border:1px solid rgba(0,0,0,0.15); color:#333; padding:6px 12px; border-radius:20px; cursor:pointer; font-size:12px; font-weight:600; }
.filter-btn.active { background:#111; color:#fff; border-color:#111; }
.empty-state { text-align:center; color: rgba(0,0,0,0.6); padding: 20px 10px; }
</style>

Add items by editing the JSON below. Each item supports: title, authors, url, status (read | in-progress | unread), and categories/tags for filtering.

<div id="papers-filters" class="filters"></div>

<div id="papers-list" class="list"></div>
<div id="papers-empty" class="empty-state" style="display:none;">No items found.</div>

<script id="papers-data" type="application/json">[
  {
    "title": "Attention Is All You Need",
    "authors": "Vaswani et al.",
    "url": "https://arxiv.org/abs/1706.03762",
    "status": "in-progress",
    "categories": ["transformers", "nlp"]
  },
  {
    "title": "Deep Residual Learning for Image Recognition",
    "authors": "He, Zhang, Ren, Sun",
    "url": "https://arxiv.org/abs/1512.03385",
    "status": "read",
    "categories": ["cv", "resnets"]
  },
  {
    "title": "Auto-Encoding Variational Bayes",
    "authors": "Kingma, Welling",
    "url": "https://arxiv.org/abs/1312.6114",
    "status": "unread",
    "categories": ["generative-models", "vae"]
  }
]</script>

<script>
(function(){
  const list = document.getElementById('papers-list');
  const dataEl = document.getElementById('papers-data');
  const filtersEl = document.getElementById('papers-filters');
  const emptyEl = document.getElementById('papers-empty');
  let items = [];
  try { items = JSON.parse(dataEl.textContent || '[]'); } catch(e) { items = []; }
  let activeCategory = 'all';

  function rowHTML(d) {
    const a = document.createElement('a');
    a.className = 'list-item';
    a.href = d.url; a.target = '_blank'; a.rel = 'noopener noreferrer';
    const statusInfo = (s) => {
      if (!s) return null;
      const key = String(s).toLowerCase();
      if (key === 'read') return { cls: 'status-read', label: 'Read' };
      if (key === 'in-progress' || key === 'inprogress') return { cls: 'status-inprogress', label: 'In progress' };
      if (key === 'unread') return { cls: 'status-unread', label: 'Unread' };
      return null;
    };
    const si = statusInfo(d.status);
    const dot = si ? `<span class="status-dot ${si.cls}" title="${si.label}"></span>` : '';
    a.innerHTML = `
      <div class="title-row"><div class="title">${d.title}</div>${dot}</div>
      <div class="authors">${d.authors}</div>`;
    return a;
  }

  function uniqueCategories() {
    const set = new Set();
    items.forEach(d => {
      if (Array.isArray(d.categories)) d.categories.forEach(c => set.add(String(c)));
      else if (d.category) set.add(String(d.category));
      else if (Array.isArray(d.tags)) d.tags.forEach(t => set.add(String(t)));
    });
    return Array.from(set).sort((a,b)=>a.localeCompare(b));
  }

  function renderFilters() {
    const cats = uniqueCategories();
    filtersEl.innerHTML = '';
    const allBtn = document.createElement('button');
    allBtn.className = 'filter-btn' + (activeCategory === 'all' ? ' active' : '');
    allBtn.textContent = 'All';
    allBtn.addEventListener('click', () => { activeCategory = 'all'; renderFilters(); render(); });
    filtersEl.appendChild(allBtn);
    cats.forEach(cat => {
      const btn = document.createElement('button');
      btn.className = 'filter-btn' + (activeCategory === cat ? ' active' : '');
      btn.textContent = cat;
      btn.addEventListener('click', () => { activeCategory = cat; renderFilters(); render(); });
      filtersEl.appendChild(btn);
    });
  }

  function render() {
    list.innerHTML = '';
    const visible = items.filter(d => {
      if (activeCategory === 'all') return true;
      if (Array.isArray(d.categories)) return d.categories.includes(activeCategory);
      if (d.category) return String(d.category) === activeCategory;
      if (Array.isArray(d.tags)) return d.tags.includes(activeCategory);
      return false;
    });
    visible.forEach(d => list.appendChild(rowHTML(d)));
    emptyEl.style.display = visible.length ? 'none' : 'block';
  }

  renderFilters();
  render();
})();
</script>


